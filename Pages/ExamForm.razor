@page "/ExamForm/{ExamId}"

@using BlazorTEST.Data
@using Microsoft.EntityFrameworkCore;
@using static BlazorTEST.Classes.DataModel.DataModelRepository;

@inject QuestionsService questionsService
@inject LoginHandlerService loginHandleServices



<div class="@StartClass" >
    <div>
        <h2>
            Do you want to start exam?
        </h2>
    </div>
    <div>
        <div class="flex-row">
            <button class="btn btn-primary" @onclick="StartExam">Rozpocznij!</button>
        </div>
    </div>
</div>


@if(examStarted)
{
 
        <div class="form-group">
            <h2>
                <p class="font-weight-bolder">
                    @actualQuestion.questionText
                </p>
            </h2>
        </div>
        <div>

            @foreach (var anwser in anwsers)
            {


                <input class="form-check-input" type="checkbox" id="@anwser.answerId" @bind="anwser.isMarked" @onclick="eventArgs => { CheckboxClicked(anwser); }" />
                <p class="font-weight-bold">@anwser.anwserText</p>
                <br />


            }

        </div>
        <div class="form-group">
            <button class="btn btn-primary" @onclick="getNextQuestion">Get Next Question!</button>
        </div>
   
}

@if(showResult)
{
<div class="flex-row">
    <div>
        <text>
            Odpowiedziałeś dobrze na: @questionsService.getScore() z @questionsService.getQuestionCount() pytań!
        </text>
    </div>
    <div>
        <text>
            Uzyskałeś: (@questionsService.getScorePercent()) % procent!
        </text>
    </div>
    @if (@questionsService.getScorePercent() > 0.5)
    {
        <div>
            <text>Zdałeś!</text>
        </div>
    }
    else
    {
        <div>
            <text>Niestety nie udało się zdać. Spróbuj jeszcze raz!</text>
        </div>
    }
</div>
}



@code {
    [Parameter]
    public string ExamId { get; set; }

    Int64 examIdInt;
    Boolean examStarted;
    Boolean showResult = false;

    List<Question> question = new List<Question>();
    List<Anwser> anwsers = new List<Anwser>();
    Boolean[] selected;


    Question actualQuestion;
    Anwser actualAnwser;
    int questionIndex = 0;

    string StartClass = "flex-column";
    string resultClass = "flex-column d-none";


    protected override void OnInitialized()
    {
        examIdInt = Convert.ToInt64(ExamId);
        questionsService.initQuestionService(examIdInt,loginHandleServices.userId);
        question = questionsService.getQuestions();
        examStarted = false;
        // anwsers = questionsService.getAnwsers();

    }

    void StartExam()
    {
        examStarted = true;
        StartClass += " d-none";
        questionRetrive();
    }

    void getNextQuestion()
    {
        questionIndex++;
        if(questionIndex == questionsService.getQuestionCount())
        {
            questionsService.calculateAnwser(anwsers);
            showResult = true;
            examStarted = false;
            questionsService.finalizeExam();
            return;
        }
        questionRetrive();

    }

    void questionRetrive()
    {
        questionsService.calculateAnwser(anwsers);

        actualQuestion = question[questionIndex];
        anwsers = questionsService.getAnwsers(actualQuestion.questionId);
        selected = new Boolean[anwsers.Count()];
    }


    void CheckboxClicked(Anwser anwser)
    {

        if(!actualQuestion.isMultiChoice)
        {
            foreach(var anwserInner in anwsers.Where(x => x.answerId != anwser.answerId))
            {
                anwserInner.isMarked = false;
            }
        }
    }



}
