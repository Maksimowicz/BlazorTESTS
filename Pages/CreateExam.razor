@page "/CreateExam"
@using BlazorTEST.Data

@using BlazorTEST.Models;
@using static BlazorTEST.Classes.DataModel.DataModelRepository;
@inject CreateExamService createExamService
@inject LoginHandlerService loginHandleServices



<h1>Create your exam!</h1>

@if (creatingStep == 0)
{
    <div class="form-group">
        <label for="titleInput">Title</label>
        <input class="@classTitle" id="titleInput" placeholder="Exam title" @bind="@examtitle" />
        <div class="invalid-feedback">Title already taken</div>
    </div>
    <div class="form-group">
        <label for="examDescription">Description</label>
        <input class="form-control" id="examDescription" placeholder="Description" @bind="@examDescription" />
    </div>
    <button type="submit" class="btn btn-primary" @onclick="checkIfCanCreate">Create exam!</button>

}
else if (creatingStep == 1)
{
    <div class="form-group">
        <label for="questionInput">Question text</label>
        <input class="@questionTextClass" id="questionInput" placeholder="Question text" @bind="@QuestionText" />
        <br />
        <label for="checkIsMultiChoice">Is multi-choice?</label>
        <input type="checkbox" id="checkIsMultiChoice" @bind="isMultiChoice" @onclick="eventArgs => { clearAnwsers(); }" />
    </div>

    @foreach (var anwser in anwsersActual)
    {
        <div class="form-group">

            <input class="form-control" @bind="@anwser.anwserText" />
            
            <label for="@anwser">Is proper?</label>
            <input type="checkbox" @bind="anwser.isProper" id="@anwser" @onclick="eventArgs => { CheckboxClicked(anwser); }" />
            <br />
        </div>
    }

    <button type="submit" class="btn btn-primary" @onclick="createQuestionForm">Create next question!</button>
    <button type="submit" class="btn btn-primary" @onclick="finalizeExam">Finihs exam!</button>


}
else if (creatingStep == 2)
{
    <div>
        <text>Dziękujemy za utworzenie rekordu!</text>
    </div>
}




@code {

    int creatingStep = 0;

    string examtitle;
    string examDescription;
    string classTitle = "form-control";

    string QuestionText = "";
    bool isMultiChoice;

    string questionTextClass = "form-control-lg";



    List<Anwser> anwsersActual;
    Exams examHeader;
    Question question;


    private void initializeClear()
    {

        anwsersActual.Clear();

        for (int i = 0; i < 4; i++)
        {
            anwsersActual.Add(
                new Anwser
                {
                    isProper = false,
                    anwserText = "",
                    anwserIdMock = i
                });
        }
    }



    protected override void OnInitialized()
    {
        anwsersActual = new List<Anwser>();
        initializeClear();

    }

    void checkIfCanCreate()
    {
        if (createExamService.checkIfTitleIsAvail(examtitle))
        {
            examHeader = createExamService.initializeExam(loginHandleServices.userId, examtitle, examDescription);
            creatingStep++;
        }
        else
        {
            classTitle += " is-invalid";
        }

    }

    void CheckboxClicked(Anwser anwser)
    {

        if (!isMultiChoice)
        {
            foreach (var anwserInner in anwsersActual.Where(x => x.anwserIdMock != anwser.anwserIdMock))
            {
                anwserInner.isProper = false;
            }
        }
    }

    void clearAnwsers()
    {
        foreach (var anwserInner in anwsersActual)
        {
            anwserInner.isProper = false;
        }
    }

    void createQuestionForm()
    {
        createExamService.createQuestion(isMultiChoice, QuestionText);

        foreach (var anwserInner in anwsersActual)
        {
            createExamService.addAnswerToQuestion(anwserInner.anwserText, anwserInner.isProper);
        }
        this.initializeClear();
        isMultiChoice = false;
        QuestionText = "";
    }

    void finalizeExam()
    {
        creatingStep++;
    }

}
